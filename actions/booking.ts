"use server"

import { z } from "zod"

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
const bookingSchema = z.object({
  name: z.string().min(2, "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"),
  phone: z.string().min(10, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
  email: z.string().email("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É").optional().or(z.literal("")),
  carBrand: z.string().min(2, "–í–∫–∞–∂—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"),
  carModel: z.string().optional(),
  carYear: z.string().optional(),
  service: z.string().min(1, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É"),
  preferredDate: z.string().min(1, "–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É"),
  preferredTime: z.string().optional(),
  comments: z.string().optional(),
})

export type BookingFormData = z.infer<typeof bookingSchema>

export async function submitBooking(_prevState: any, formData: FormData) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData
    const data = {
      name: formData.get("name") as string,
      phone: formData.get("phone") as string,
      email: formData.get("email") as string,
      carBrand: formData.get("carBrand") as string,
      carModel: formData.get("carModel") as string,
      carYear: formData.get("carYear") as string,
      service: formData.get("service") as string,
      preferredDate: formData.get("preferredDate") as string,
      preferredTime: formData.get("preferredTime") as string,
      comments: formData.get("comments") as string,
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validatedData = bookingSchema.parse(data)

    // –§–æ—Ä–º–∏—Ä—É–µ–º email —Å–æ–æ–±—â–µ–Ω–∏–µ
    const emailSubject = `–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–æ–≥–ª—è–¥ - ${validatedData.name}`
    const emailBody = `
–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–æ–≥–ª—è–¥:

üë§ –ö–ª—ñ—î–Ω—Ç: ${validatedData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${validatedData.phone}
${validatedData.email ? `üìß Email: ${validatedData.email}` : ""}

üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å:
   –ú–∞—Ä–∫–∞: ${validatedData.carBrand}
   ${validatedData.carModel ? `–ú–æ–¥–µ–ª—å: ${validatedData.carModel}` : ""}
   ${validatedData.carYear ? `–†—ñ–∫: ${validatedData.carYear}` : ""}

üîß –ü–æ—Å–ª—É–≥–∞: ${validatedData.service}

üìÖ –ë–∞–∂–∞–Ω–∞ –¥–∞—Ç–∞: ${validatedData.preferredDate}
${validatedData.preferredTime ? `‚è∞ –ë–∞–∂–∞–Ω–∏–π —á–∞—Å: ${validatedData.preferredTime}` : ""}

${validatedData.comments ? `üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: ${validatedData.comments}` : ""}

---
–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞: ${new Date().toLocaleString("uk-UA")}
    `.trim()

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ç–∏–ø–∞ Resend, SendGrid –∏–ª–∏ Nodemailer
    // –ü—Ä–∏–º–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º fetch –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API:

    /*
    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.RESEND_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        from: 'noreply@techosmotr.ua',
        to: 'tehoglyad.mk@gmail.com',
        subject: emailSubject,
        text: emailBody,
      }),
    })

    if (!response.ok) {
      throw new Error('Failed to send email')
    }
    */

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É)
    console.log("Email would be sent to: tehoglyad.mk@gmail.com")
    console.log("Subject:", emailSubject)
    console.log("Body:", emailBody)

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise((resolve) => setTimeout(resolve, 1500))

    return {
      success: true,
      message: "–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
    }
  } catch (error) {
    console.error("Booking submission error:", error)

    if (error instanceof z.ZodError) {
      return {
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: " + error.errors.map((e) => e.message).join(", "),
        errors: error.errors,
      }
    }

    return {
      success: false,
      message: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º.",
    }
  }
}
